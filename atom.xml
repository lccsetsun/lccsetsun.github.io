<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>setsun</title>
  
  <subtitle>For incalculable value</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lccsetsun.github.io/"/>
  <updated>2019-05-11T08:01:51.926Z</updated>
  <id>https://lccsetsun.github.io/</id>
  
  <author>
    <name>setsun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java8的Stream特性</title>
    <link href="https://lccsetsun.github.io/2019/05/11/Java8_school/"/>
    <id>https://lccsetsun.github.io/2019/05/11/Java8_school/</id>
    <published>2019-05-11T08:47:28.000Z</published>
    <updated>2019-05-11T08:01:51.926Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/java8.jpg" alt="java8"></p><a id="more"></a><h1 id="Java8"><a href="#Java8" class="headerlink" title="Java8"></a>Java8</h1><h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h1><p>写这个文档的主要原因是自己使用java8时间并不长，对java的认知还停留在java6的基础上，很多新功能是：然也，知之不详；所以然也，不知。 所有平时就抽一些时间出来，做些记录和总结，就形成了这个文档，权当学习笔记之用。</p><h1 id="2-Lambda"><a href="#2-Lambda" class="headerlink" title="2. Lambda"></a>2. Lambda</h1><h2 id="（1）什么是Lambda"><a href="#（1）什么是Lambda" class="headerlink" title="（1）什么是Lambda?"></a>（1）什么是Lambda?</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lambda是从数学中的<span class="built_in">lambda</span>运算引申出来的，在计算机中主要指匿名函数，也是函数式编程的核心。你可能会问什么是函数式编程，它与命令式编程不同在哪里？ 笼统的来说，函数式编程关心的数据映射的问题，命令式编程更关心的是解决问题的步骤。</span><br></pre></td></tr></table></figure><h2 id="（2）Lambda基本语法"><a href="#（2）Lambda基本语法" class="headerlink" title="（2）Lambda基本语法"></a>（2）Lambda基本语法</h2><p>lambda表达式主要包括三部分：Argument List, Arrow, Body<br><br>对应的比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x+y</span><br><span class="line">() -&gt; <span class="number">42</span></span><br><span class="line">(String s) -&gt; &#123;System.out.println(s);&#125;</span><br></pre></td></tr></table></figure><h3 id="a-简单示例"><a href="#a-简单示例" class="headerlink" title="(a) 简单示例"></a>(a) 简单示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable r1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span> <span class="params">( )</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"hello  runnable"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Runnable r2 = ()-&gt;System.out.println(<span class="string">"hello lambda runner"</span>);</span><br><span class="line">        r1.run();</span><br><span class="line">        r2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码反应了两个情况，一是lambda确实简洁，之前要6行代码做的事情，lambda一行就搞定了；二是其实lambda并没有引入新东西，lambda做的事情，用普通的java也能做，只是效率没那么高而已。</p><p>当然还有别的原因，在集合的处理上，lambda表达式能简化多线程或者多核的处理，这也是java8打动人的原因。</p><h3 id="b-Comparator"><a href="#b-Comparator" class="headerlink" title="(b) Comparator"></a>(b) Comparator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List &lt;Car&gt; carList = LambdaTest.buildCarList();</span><br><span class="line">        System.out.println(<span class="string">"\n=== Sorted with normal java ASC ==="</span>);</span><br><span class="line">        Collections.sort(carList, <span class="keyword">new</span> Comparator &lt;Car&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span> <span class="params">(Car o1, Car o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getPrice() - o2.getPrice();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Car car : carList) &#123;</span><br><span class="line">            System.out.print(car.getPrice() + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n=== Sorted with lambda ASC ==="</span>);</span><br><span class="line">        Collections.sort(carList, (Car car1, Car car2) -&gt; (car1.getPrice() - car2.getPrice()));</span><br><span class="line">        <span class="keyword">for</span> (Car car : carList) &#123;</span><br><span class="line">            System.out.print(car.getPrice() + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n=== Sorted with lambda DESC ==="</span>);</span><br><span class="line">        Collections.sort(carList, (car1,  car2) -&gt; (car2.getPrice() - car1.getPrice()));</span><br><span class="line">        carList.forEach(c -&gt; System.out.print(c.getPrice() + <span class="string">" "</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面例子中也明显可以看出，使用Lambda做一些自定义的排序，更为灵活简便。升序和降序只用改变一下位置就可以。注意降序排列跟升序排的写法并不一致，<br><br><code>Collections.sort(carList, (car1, car2) -&gt; (car2.getPrice() - car1.getPrice()));</code></p><p><strong>lambda会自动做参数类型推导，所以写的时候省略也是参数类型可以的！</strong><br><br><strong>遍历list用了forEach</strong><br><br><code>carList.forEach(c -&gt; System.out.print(c.getPrice() + &quot; &quot;));</code></p><h3 id="c-的使用"><a href="#c-的使用" class="headerlink" title="(c) ::的使用"></a>(c) <code>::</code>的使用</h3><p>使用<code>::</code>有三种方式</p><ul><li>object::instanceMethod</li><li>Class::staticMethod</li><li>Class::instanceMethod</li></ul><ol><li>第一种方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span> <span class="params">( )</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentGreeter</span> <span class="keyword">extends</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span> <span class="params">( )</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">super</span>::greet);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ConcurrentGreeter().greet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码运行后，会调用父类Greeter的greet方法<br></p><ol start="2"><li>第二种方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>上述代码也等价与<code>list.forEach(l -&gt; System.out.println(l));</code></p><ol start="3"><li>第三种方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; labels = ...;</span><br><span class="line">Stream&lt;Button&gt; stream = labels.stream().map(Button::<span class="keyword">new</span>); </span><br><span class="line">List&lt;Button&gt; buttons = stream.collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>stream也是java8中的核心内容之一，第二章仔细介绍类stream的用法。</p><h3 id="Lambda最佳实践"><a href="#Lambda最佳实践" class="headerlink" title="Lambda最佳实践"></a>Lambda最佳实践</h3><p>待补充</p><h1 id="2-Stream（流）"><a href="#2-Stream（流）" class="headerlink" title="2. Stream（流）"></a>2. Stream（流）</h1><h3 id="a-简介"><a href="#a-简介" class="headerlink" title="(a)简介"></a>(a)简介</h3><p>stream也叫流，大概是java8最受追捧和欢迎的特性，stream最大的特点有两个：</p><ul><li>代码简介，函数式编程的的写法让代码更易读的同时，长度也缩短了很多</li><li>多核友好， 程序员几乎不用关心串并行的事儿，吃着火锅，唱着歌就能写出高效率的代码。</li></ul><h3 id="b-stream是如何工作的"><a href="#b-stream是如何工作的" class="headerlink" title="(b) stream是如何工作的"></a>(b) stream是如何工作的</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List &lt;String&gt; myList =</span><br><span class="line">            Arrays.asList(<span class="string">"a1"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"c2"</span>, <span class="string">"c1"</span>, <span class="string">"c5"</span>, <span class="string">"c3"</span>);</span><br><span class="line"></span><br><span class="line">        myList</span><br><span class="line">            .stream()</span><br><span class="line">            .filter(s -&gt; s.startsWith(<span class="string">"c"</span>))</span><br><span class="line">            .map(String::toUpperCase)</span><br><span class="line">            .sorted()</span><br><span class="line">            .forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>流函数有两种类型，一种是中间类型，一种是终止类型，中间类型返回一个stream对象方便大家做优雅的链式调用，终止类型或者说终端类型是返回一个对象或者是吗都不返回，比如List或者map等等。总而言之，stream到这个函数就终止了，所以叫终止类型。</p><p>上述例子中， filter, map, sorted就是中间类型， forEach就是终止类型。<br><br>大部分stream函数是接受lambda作为参数的， 其实也容易理解，要用lambda定义这个流函数具体要做什么，filter是做过滤，但具体怎么做，过滤哪些，留下哪些？都是要lambda来定义，当然可以用java函数代替，但明显没有lambda优雅，可读性高，这也是为什么要用labmda的原因之一。</p><p><strong>注意，不要在流函数中，改变集合，比如增加或者删除元素。</strong></p><h3 id="c-stream类型介绍"><a href="#c-stream类型介绍" class="headerlink" title="(c) stream类型介绍"></a>(c) stream类型介绍</h3><p>流可以从串并行的缴费可以分为stream和parallelStream，即串行流和并行流，但其实一种stream.从类型上有可以分几类，创建方式如下：</p><ol><li>第一种也是最常见的一种是通过List,Set等对象的stream()方法，获取stream</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList(<span class="string">"a1"</span>, <span class="string">"a2"</span>, <span class="string">"a3"</span>)</span><br><span class="line">            .stream()</span><br><span class="line">            .findFirst()</span><br><span class="line">            .ifPresent(System.out::println);</span><br></pre></td></tr></table></figure><ol start="2"><li>通过Stream.of()函数创建流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">"a1"</span>, <span class="string">"a2"</span>, <span class="string">"a3"</span>)</span><br><span class="line">  .findFirst()</span><br><span class="line">  .ifPresent(System.out::println);</span><br></pre></td></tr></table></figure><ol start="3"><li>java8也定义了几种基础类型的流， 比如IntStream, LongStream, DoubleStream</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IntStream.range(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">            .forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>基础类型的流跟对象流的用法相同又有所不同，相同之处是他们都继承自BaseStream。 不同之处是部分函数参数有所不同， 比如IntStream使用IntFunction而不是Function, 用IntPredicate而不是Predicate； 基础类型的流支持一些聚合流函数，比如sum, average等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Arrays.stream(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br><span class="line">            .map(n -&gt; <span class="number">2</span> * n + <span class="number">1</span>)</span><br><span class="line">            .average()</span><br><span class="line">            .ifPresent(System.out::println);</span><br></pre></td></tr></table></figure><p>不同的流类型之间也可以做转换, 比如IntStream可以转为DoubleStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntStream.range(<span class="number">1</span>,<span class="number">10</span>).mapToDouble(Double::<span class="keyword">new</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>对象流可以转换为基础类型流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">"a12"</span>, <span class="string">"a23"</span>, <span class="string">"a34"</span>)</span><br><span class="line">.map(s -&gt; s.substring(<span class="number">1</span>))</span><br><span class="line">.mapToInt(Integer::parseInt)</span><br><span class="line">.max()</span><br><span class="line">.ifPresent(System.out::println);</span><br></pre></td></tr></table></figure><p>基础类型流可以转换为对象流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntStream.range(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">.mapToObj(i -&gt; <span class="string">"a"</span> + i)</span><br><span class="line">.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p><em>360度前空翻转体两周半</em>流类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)</span><br><span class="line">.mapToInt(Double::intValue)</span><br><span class="line">.mapToObj(i -&gt; <span class="string">"a"</span> + i)</span><br><span class="line">.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="d-流函数执行顺序"><a href="#d-流函数执行顺序" class="headerlink" title="(d) 流函数执行顺序"></a>(d) 流函数执行顺序</h3><p>流的本质跟sql有些类似，即使是为了获取相同的数据，不同的写法效率也大大不同。<br><br>先看一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">.map(s -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"map: "</span> + s);</span><br><span class="line"><span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">&#125;)</span><br><span class="line">.filter(s -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">"filter: "</span> + s);</span><br><span class="line"><span class="keyword">return</span> s.startsWith(<span class="string">"A"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.forEach(s -&gt; System.out.println(<span class="string">"forEach: "</span> + s));</span><br></pre></td></tr></table></figure><p>这个的输出结果是</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">map:</span> d2</span><br><span class="line"><span class="symbol">filter:</span> D2</span><br><span class="line"><span class="symbol">map:</span> a2</span><br><span class="line"><span class="symbol">filter:</span> A2</span><br><span class="line"><span class="symbol">forEach:</span> A2</span><br><span class="line"><span class="symbol">map:</span> b1</span><br><span class="line"><span class="symbol">filter:</span> B1</span><br><span class="line"><span class="symbol">map:</span> b3</span><br><span class="line"><span class="symbol">filter:</span> B3</span><br><span class="line"><span class="symbol">map:</span> c</span><br><span class="line"><span class="symbol">filter:</span> C</span><br></pre></td></tr></table></figure><p>如果改变下顺序呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">.filter(s -&gt; &#123;</span><br><span class="line">  System.out.println(<span class="string">"filter: "</span> + s);</span><br><span class="line">  <span class="keyword">return</span> s.startsWith(<span class="string">"a"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.map(s -&gt; &#123;</span><br><span class="line">  System.out.println(<span class="string">"map: "</span> + s);</span><br><span class="line">  <span class="keyword">return</span> s.toUpperCase();</span><br><span class="line">&#125;)</span><br><span class="line">.forEach(s -&gt; System.out.println(<span class="string">"forEach: "</span> + s));</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">filter:</span> d2</span><br><span class="line"><span class="symbol">filter:</span> a2</span><br><span class="line"><span class="symbol">map:</span> a2</span><br><span class="line"><span class="symbol">forEach:</span> A2</span><br><span class="line"><span class="symbol">filter:</span> b1</span><br><span class="line"><span class="symbol">filter:</span> b3</span><br><span class="line"><span class="symbol">filter:</span> c</span><br></pre></td></tr></table></figure><p>map跟forEach仅执行了一次</p><h3 id="e-stream复用"><a href="#e-stream复用" class="headerlink" title="(e) stream复用"></a>(e) stream复用</h3><p>正常情况下stream是不能被复用的，运行下面代码会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream =</span><br><span class="line">  Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">  .filter(s -&gt; s.startsWith(<span class="string">"a"</span>));</span><br><span class="line"></span><br><span class="line">stream.anyMatch(s -&gt; <span class="keyword">true</span>);    </span><br><span class="line">stream.noneMatch(s -&gt; <span class="keyword">true</span>);   </span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">java.lang.IllegalStateException: stream has already been operated upon or closed</span><br><span class="line">    at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:<span class="number">229</span>)</span><br><span class="line">    at java.util.stream.ReferencePipeline.noneMatch(ReferencePipeline.java:<span class="number">459</span>)</span><br><span class="line">    at com.winterbe.java8.Streams5.test7(Streams5.java:<span class="number">38</span>)</span><br><span class="line">    at com.winterbe.java8.Streams5.main(Streams5.java:<span class="number">28</span>)</span><br></pre></td></tr></table></figure><p>复用的办法是使用supplier每次都构建一个新的流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Stream&lt;String&gt;&gt; streamSupplier =</span><br><span class="line">    () -&gt; Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</span><br><span class="line">            .filter(s -&gt; s.startsWith(<span class="string">"a"</span>));</span><br><span class="line"></span><br><span class="line">streamSupplier.get().anyMatch(s -&gt; <span class="keyword">true</span>);   </span><br><span class="line">streamSupplier.get().noneMatch(s -&gt; <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h3 id="f-stream进阶"><a href="#f-stream进阶" class="headerlink" title="(f) stream进阶"></a>(f) stream进阶</h3><p>除了上面例子中用到的filer,map, forEach等还有一些也是会用到的流函数，先构造一个对象List</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    Person(String name, <span class="keyword">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; persons =</span><br><span class="line">    Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">"Paomo"</span>, <span class="number">18</span>),</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">"Linzhi"</span>, <span class="number">23</span>),</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">"Wenhe"</span>, <span class="number">23</span>),</span><br><span class="line">        <span class="keyword">new</span> Person(<span class="string">"Shenlv"</span>, <span class="number">12</span>));</span><br></pre></td></tr></table></figure><h4 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h4><p>collect是比较常用的流终止函数，与<code>Collectors</code>类搭配使用，奇妙无穷。<br><br>获取Person中name以”P”开头的人：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; filtered =</span><br><span class="line">    persons</span><br><span class="line">        .stream()</span><br><span class="line">        .filter(p -&gt; p.name.startsWith(<span class="string">"P"</span>))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">System.out.println(filtered);  <span class="comment">// Paomo</span></span><br></pre></td></tr></table></figure><p>当然也可以获取Set，使用<code>Collectors.toSet()</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;Person&gt;&gt; personsByAge = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .collect(Collectors.groupingBy(p -&gt; p.age));</span><br><span class="line"></span><br><span class="line">personsByAge</span><br><span class="line">    .forEach((age, p) -&gt; System.out.format(<span class="string">"age %s: %s\n"</span>, age, p));</span><br></pre></td></tr></table></figure><p>collect好像还好，但groupingBy一开始看有点晕，看下函数源码知道传入的lambda，是作为classfier把item映射成key， collect是会返回Person.age为key, 如果Person年纪相同，会放入同一个list当中。<br>最后得到结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age <span class="number">18</span>: [Paomo]</span><br><span class="line">age <span class="number">23</span>: [Linzhi, Wenhe]</span><br><span class="line">age <span class="number">12</span>: [Shenlv]</span><br></pre></td></tr></table></figure><p>Collectors非常灵活，如果你想计算这些Person的平均年龄：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Double averageAge = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .collect(Collectors.averagingInt(p -&gt; p.age));</span><br><span class="line"></span><br><span class="line">System.out.println(averageAge);</span><br></pre></td></tr></table></figure><p>获取这些人的一些统计数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IntSummaryStatistics ageSummary =</span><br><span class="line">    persons</span><br><span class="line">        .stream()</span><br><span class="line">        .collect(Collectors.summarizingInt(p -&gt; p.age));</span><br><span class="line"></span><br><span class="line">System.out.println(ageSummary);</span><br><span class="line"><span class="comment">//IntSummaryStatistics&#123;count=4, sum=76, min=12, average=19.000000, max=23&#125;</span></span><br></pre></td></tr></table></figure><p>所有人拼接成一个字符串输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String phrase = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .filter(p -&gt; p.age &gt;= <span class="number">18</span>)</span><br><span class="line">    .map(p -&gt; p.name)</span><br><span class="line">    .collect(Collectors.joining(<span class="string">" and "</span>, <span class="string">"In China,"</span>, <span class="string">" are of legal age."</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(phrase);</span><br><span class="line"><span class="comment">//output: In China, Paomo and Linzhi and Wenhe are of legal age.</span></span><br></pre></td></tr></table></figure><p>joining的三个参数，第一个为分隔符，第二个为前缀，第三个为后缀。<br><br>Person转换为map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; map = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .collect(Collectors.toMap(</span><br><span class="line">        p -&gt; p.age,</span><br><span class="line">        p -&gt; p.name,</span><br><span class="line">        (name1, name2) -&gt; name1 + <span class="string">";"</span> + name2));</span><br><span class="line"></span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure><p>toMap传入的第三个参数是mergeFunction, 即当key相同时，把value合并的函数。可以自定Collector，完成一些定制化的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Collector&lt;Person, StringJoiner, String&gt; personNameCollector =</span><br><span class="line">    Collector.of(</span><br><span class="line">        () -&gt; <span class="keyword">new</span> StringJoiner(<span class="string">" | "</span>),          </span><br><span class="line">        (j, p) -&gt; j.add(p.name.toUpperCase()),  </span><br><span class="line">        (j1, j2) -&gt; j1.merge(j2),               </span><br><span class="line">        StringJoiner::toString);                </span><br><span class="line"></span><br><span class="line">String names = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .collect(personNameCollector);</span><br><span class="line"><span class="comment">//output: PAOMO | LINZHI | WENHE | SHENLV</span></span><br></pre></td></tr></table></figure><p>collector里面要传4个参数，分别的supplier, accumulator, combiner和finisher, 关于这几个函数具体含义后面会有更详细的介绍。但是可以看出collect使用起来非常非常灵活。</p><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>reduce会将stream中的所有元素combine到一块儿，形成一个最终结果。reduce函数有三种重载形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Optional&lt;T&gt; <span class="title">reduce</span><span class="params">(BinaryOperator&lt;T&gt; accumulator)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">reduce</span><span class="params">(T identity, BinaryOperator&lt;T&gt; accumulator)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;U&gt; <span class="function">U <span class="title">reduce</span><span class="params">(U identity, </span></span></span><br><span class="line"><span class="function"><span class="params"> BiFunction&lt;U, ? <span class="keyword">super</span> T, U&gt; accumulator, </span></span></span><br><span class="line"><span class="function"><span class="params"> BinaryOperator&lt;U&gt; combiner)</span></span>;</span><br></pre></td></tr></table></figure><p>BinaryOperator，BinaryOperator其实是继承自BiFunction，主要是两种相同类型的参数，经过运算产生一个相同类型的结果的运算符；BiFunction定义类似，是接收两个参数，产生一个结果的函数。</p><p>第一种方式，获取年纪最大的人，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">persons</span><br><span class="line">    .stream()</span><br><span class="line">    .reduce((p1, p2) -&gt; p1.age &gt; p2.age ? p1 : p2)</span><br><span class="line">    .ifPresent(System.out::println);</span><br></pre></td></tr></table></figure><p>第二种调用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Person result =</span><br><span class="line">    persons</span><br><span class="line">        .stream()</span><br><span class="line">        .reduce(<span class="keyword">new</span> Person(<span class="string">""</span>, <span class="number">0</span>), (p1, p2) -&gt; &#123;</span><br><span class="line">            p1.age += p2.age;</span><br><span class="line">            p1.name += p2.name;</span><br><span class="line">            <span class="keyword">return</span> p1;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">//name=PaomoLinzhiWenheShenlv; age=76</span></span><br></pre></td></tr></table></figure><p>上面方法返回的是一个年纪为list中所有person的age之和，name为所有人名字的拼接结果</p><p>第三种调用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Integer ageSum = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .reduce(<span class="number">0</span>,</span><br><span class="line">        (sum, p) -&gt; &#123;</span><br><span class="line">            System.out.format(<span class="string">"accumulator: sum=%s; person=%s\n"</span>, sum, p);</span><br><span class="line">            <span class="keyword">return</span> sum += p.age;</span><br><span class="line">        &#125;,</span><br><span class="line">        (sum1, sum2) -&gt; &#123;</span><br><span class="line">            System.out.format(<span class="string">"combiner: sum1=%s; sum2=%s\n"</span>, sum1, sum2);</span><br><span class="line">            <span class="keyword">return</span> sum1 + sum2;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">//accumulator: sum=0; person=Paomo</span></span><br><span class="line"><span class="comment">//accumulator: sum=18; person=Linzhi</span></span><br><span class="line"><span class="comment">//accumulator: sum=41; person=Wenhe</span></span><br><span class="line"><span class="comment">//accumulator: sum=64; person=Shenlv</span></span><br></pre></td></tr></table></figure><p>啊？ reduce只调用了accumulator没调用combiner? 其实这是因为combiner是在串行流中才会用到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Integer ageSum = persons</span><br><span class="line">    .parallelStream()</span><br><span class="line">    .reduce(<span class="number">0</span>,</span><br><span class="line">        (sum, p) -&gt; &#123;</span><br><span class="line">            System.out.format(<span class="string">"accumulator: sum=%s; person=%s\n"</span>, sum, p);</span><br><span class="line">            <span class="keyword">return</span> sum += p.age;</span><br><span class="line">        &#125;,</span><br><span class="line">        (sum1, sum2) -&gt; &#123;</span><br><span class="line">            System.out.format(<span class="string">"combiner: sum1=%s; sum2=%s\n"</span>, sum1, sum2);</span><br><span class="line">            <span class="keyword">return</span> sum1 + sum2;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">//accumulator: sum=0; person=Wenhe</span></span><br><span class="line"><span class="comment">//accumulator: sum=0; person=Paomo</span></span><br><span class="line"><span class="comment">//accumulator: sum=0; person=Linzhi</span></span><br><span class="line"><span class="comment">//accumulator: sum=0; person=Shenlv</span></span><br><span class="line"><span class="comment">//combiner: sum1=23; sum2=12</span></span><br><span class="line"><span class="comment">//combiner: sum1=18; sum2=23</span></span><br><span class="line"><span class="comment">//combiner: sum1=41; sum2=35</span></span><br></pre></td></tr></table></figure><p>accumulator是并行被调用所以需要combiner把accumalotr中的值归并累加。</p><h3 id="g-Parallel-Streams（并行流）"><a href="#g-Parallel-Streams（并行流）" class="headerlink" title="(g) Parallel Streams（并行流）"></a>(g) Parallel Streams（并行流）</h3><p>面对数据量比较大的情况，可以使用parallelStream，以充分利用系统的多核和性能，可以使用如下代码获取到当前的并行线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ForkJoinPool commonPool = ForkJoinPool.commonPool();</span><br><span class="line">System.out.println(commonPool.getParallelism());  </span><br><span class="line"><span class="comment">//output: 7</span></span><br></pre></td></tr></table></figure><p>针对上面那个例子，我们可以看下，到底每个操作是在哪个线程中执行的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">persons</span><br><span class="line">    .parallelStream()</span><br><span class="line">    .reduce(<span class="number">0</span>,</span><br><span class="line">        (sum, p) -&gt; &#123;</span><br><span class="line">            System.out.format(<span class="string">"accumulator: sum=%s; person=%s [%s]\n"</span>,</span><br><span class="line">                sum, p, Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span> sum += p.age;</span><br><span class="line">        &#125;,</span><br><span class="line">        (sum1, sum2) -&gt; &#123;</span><br><span class="line">            System.out.format(<span class="string">"combiner: sum1=%s; sum2=%s [%s]\n"</span>,</span><br><span class="line">                sum1, sum2, Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span> sum1 + sum2;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">//accumulator: sum=0; person=Wenhe [main]</span></span><br><span class="line"><span class="comment">//accumulator: sum=0; person=Shenlv [ForkJoinPool.commonPool-worker-6]</span></span><br><span class="line"><span class="comment">//accumulator: sum=0; person=Linzhi [ForkJoinPool.commonPool-worker-5]</span></span><br><span class="line"><span class="comment">//accumulator: sum=0; person=Paomo [ForkJoinPool.commonPool-worker-2]</span></span><br><span class="line"><span class="comment">//combiner: sum1=23; sum2=12 [ForkJoinPool.commonPool-worker-6]</span></span><br><span class="line"><span class="comment">//combiner: sum1=18; sum2=23 [ForkJoinPool.commonPool-worker-2]</span></span><br><span class="line"><span class="comment">//combiner: sum1=41; sum2=35 [ForkJoinPool.commonPool-worker-2]</span></span><br></pre></td></tr></table></figure><p>可以看出accumulator和combiner都是并行执行的。</p><h1 id="3-新增API"><a href="#3-新增API" class="headerlink" title="3. 新增API"></a>3. 新增API</h1><h2 id="1-时间处理"><a href="#1-时间处理" class="headerlink" title="(1) 时间处理"></a>(1) 时间处理</h2><p>原来时间处理函数存在的问题：</p><ul><li>线程安全: Date和Calendar不是线程安全的，你需要编写额外的代码处理线程安全问题</li><li>API设计和易用性: 由于Date和Calendar的设计不当你无法完成日常的日期操作</li><li>ZonedDate和Time: 你必须编写额外的逻辑处理时区和那些旧的逻辑</li></ul><h3 id="a-获取当前日期"><a href="#a-获取当前日期" class="headerlink" title="(a) 获取当前日期"></a>(a) 获取当前日期</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"localDate: "</span> + LocalDate.now());</span><br></pre></td></tr></table></figure><h3 id="b-判断是否为闰年"><a href="#b-判断是否为闰年" class="headerlink" title="(b) 判断是否为闰年"></a>(b) 判断是否为闰年</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//leap year</span></span><br><span class="line">        System.out.println(<span class="string">"is leap year: LocalDate.now()"</span> + LocalDate.now().isLeapYear());</span><br></pre></td></tr></table></figure><h3 id="c-日期比较"><a href="#c-日期比较" class="headerlink" title="(c) 日期比较"></a>(c) 日期比较</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// time comparison</span></span><br><span class="line">        <span class="keyword">boolean</span> isBefore = LocalDate.parse(<span class="string">"2018-02-20"</span>)</span><br><span class="line">            .isBefore(LocalDate.parse(<span class="string">"2018-01-22"</span>));</span><br><span class="line">        System.out.println(<span class="string">"isBefore: "</span> + isBefore);</span><br><span class="line">        <span class="keyword">boolean</span> isAfter = LocalDate.parse(<span class="string">"2018-02-20"</span>).isAfter(LocalDate.parse(<span class="string">"2018-01-22"</span>));</span><br><span class="line">        System.out.println(<span class="string">"isAfter: "</span> + isAfter);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// first day or last day of the month</span></span><br><span class="line">        LocalDate lastDayOfMonth = LocalDate.parse(<span class="string">"2018-02-20"</span>)</span><br><span class="line">            .with(TemporalAdjusters.lastDayOfMonth());</span><br><span class="line">        System.out.println(<span class="string">"Last Day of 2018/07: "</span> + lastDayOfMonth);</span><br></pre></td></tr></table></figure><h3 id="d-日期格式化"><a href="#d-日期格式化" class="headerlink" title="(d) 日期格式化"></a>(d) 日期格式化</h3><p>string format容易被忽视，但是也很重要<br><br><code>yyyy是指当天所在的年份， YYYY是指当前周所在的年份。</code><br><br>如果不注意跨年可能出现bug（<a href="https://www.atatech.org/articles/97733）" target="_blank" rel="noopener">https://www.atatech.org/articles/97733）</a><br><br><code>MM是月份， mm是分钟</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// format date</span></span><br><span class="line">        LocalDateTime now = LocalDateTime.now();</span><br><span class="line">        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        System.out.println(<span class="string">"default time format: "</span> + now);</span><br><span class="line">        System.out.println(<span class="string">"custom time format: "</span> + now.format(dateTimeFormatter));</span><br></pre></td></tr></table></figure><h3 id="e-计算时间间隔"><a href="#e-计算时间间隔" class="headerlink" title="(e) 计算时间间隔"></a>(e) 计算时间间隔</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime finalDate = LocalDateTime.now().plus(Period.ofDays(<span class="number">10</span>));</span><br><span class="line">        Long between = ChronoUnit.MINUTES.between(now, finalDate);</span><br><span class="line">        System.out.println(<span class="string">"minutes between now and ten days after: "</span> + between);</span><br></pre></td></tr></table></figure><h2 id="（2）interface的default函数"><a href="#（2）interface的default函数" class="headerlink" title="（2）interface的default函数"></a>（2）interface的default函数</h2><p>java8还是支持的接口可以设置default方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MathTool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-奇技淫巧"><a href="#5-奇技淫巧" class="headerlink" title="5. 奇技淫巧"></a>5. 奇技淫巧</h1><h2 id="（1）捕获多个Exception"><a href="#（1）捕获多个Exception" class="headerlink" title="（1）捕获多个Exception"></a>（1）捕获多个Exception</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"/a/b.txt"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种每个都捕获的写法并不优雅，其实jdk7就提供了一种相对优雅的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"/a/b.txt"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException | IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-字符串拼接"><a href="#2-字符串拼接" class="headerlink" title="(2) 字符串拼接"></a>(2) 字符串拼接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = String.join(<span class="string">","</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br></pre></td></tr></table></figure><h1 id="6-引用"><a href="#6-引用" class="headerlink" title="6.引用"></a>6.引用</h1><ol><li><a href="https://stackoverflow.com/questions/16501/what-is-a-lambda-function" target="_blank" rel="noopener">https://stackoverflow.com/questions/16501/what-is-a-lambda-function</a></li><li><a href="http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/" target="_blank" rel="noopener">http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/java8.jpg&quot; alt=&quot;java8&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javaStream" scheme="https://lccsetsun.github.io/categories/javaStream/"/>
    
    
      <category term="java8" scheme="https://lccsetsun.github.io/tags/java8/"/>
    
      <category term="Stream" scheme="https://lccsetsun.github.io/tags/Stream/"/>
    
      <category term="Filter" scheme="https://lccsetsun.github.io/tags/Filter/"/>
    
      <category term="Collectors" scheme="https://lccsetsun.github.io/tags/Collectors/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch 集群搭建</title>
    <link href="https://lccsetsun.github.io/2019/04/20/elk/"/>
    <id>https://lccsetsun.github.io/2019/04/20/elk/</id>
    <published>2019-04-20T08:47:28.000Z</published>
    <updated>2019-04-20T11:05:56.682Z</updated>
    
    <content type="html"><![CDATA[<h3 id="业务需求场景"><a href="#业务需求场景" class="headerlink" title="业务需求场景"></a>业务需求场景</h3><p>​    线上服务日志过多,为了方便监控系统运行状况,场景举例:</p><hr><h3 id="服务关系介绍"><a href="#服务关系介绍" class="headerlink" title="服务关系介绍"></a>服务关系介绍</h3><ul><li>A 服务网关 </li><li>B 具体服务 </li><li>C 拉取服务信息的集群(master work) </li><li>拉取信息(这里意为获取视频流 .h264)</li></ul><h3 id="运行逻辑概括"><a href="#运行逻辑概括" class="headerlink" title="运行逻辑概括"></a>运行逻辑概括</h3><ul><li><p>A服务网关</p></li><li><p>C服务调用网关,获取通行证</p></li><li><p>然后用C的work服务携带通行证去B 拉取信息存到消息队列,供下游算法执行相应的业务处理</p></li></ul><h3 id="目前存在问题"><a href="#目前存在问题" class="headerlink" title="目前存在问题"></a>目前存在问题</h3><ul><li>拉取信息超时错误代码(404,408…)</li><li>拉取信息失败(设置重试时间,一定时间后重试拉取)</li><li>获取网关通行证失败(c服务同一时间大量的去请求网关获取通行证,导致网关队列堵塞,处理不过来)</li><li>c服务增加任务失败,无响应</li></ul><hr><h3 id="拉取信息超时的原因总结"><a href="#拉取信息超时的原因总结" class="headerlink" title="拉取信息超时的原因总结"></a>拉取信息超时的原因总结</h3><p>1.获取网关通行证失败,或者获取不到,为此设置失败重试,直到拿到通行证为止</p><p>以上方案导致 网关会莫名其妙的挂掉,后面优化了网关的服务</p><p>2.拉取信息失败</p><p>原因当视频流不完整的时候体现为糊化,卡顿,由于我们拉取信息的代码逻辑是,不要糊化的视频,所以一旦出现卡顿糊化现象,也就是一秒二十四帧,丢了一帧,我们会全部抛弃之后的所有,知道抓到下一个I帧,也就是所谓的关键帧才会往消息队列里面存,这就导致了,提供服务信息的B平台看到有一点卡顿,而C平台则直接跳好几秒的情况,而一旦超过三秒没有收到数据包,则认为断流,系统将会主动断开连接,重新请求获取通行证,这样主动断开的操作是为了节约内存消耗,让没有拉取到信息的任务不在占用运行空间,给其他任务使用</p><p>3.获取网关通行证失败</p><p>​    这个可能原因是网关承受不住那么大的并发访问,导致一直阻塞内存飙升,网关不是我负责的,我也不清楚具体什么原因但是大致是因为并发太大承受不住的问题</p><p>4.c服务增加任务失败,无响应</p><p>这个问题主要是由第三个问题影响的蝴蝶效应,网关处理不过来,C新加的任务需要请求网关,然后一直在A的等待队列里面,没有任何回应,也没有错误代码,就卡在网关这里了,最后导致C服务也挂掉了</p><p>以上问题的排查步骤,都需要去机器上grep一下日志,查看当前点位是什么状态,如果请求成功,还要去work机器上,看看是因为拉取失败,还是真的没有信息,步骤繁琐,还要查询任务分配到集群的那个机器上,排查时间长,效率低,所以考虑不熟elk集群进行监控任务</p><p>Elk 部署前提,需要jdk支持</p><p>以下默认你已成功安装jdk</p><p>Elasticsearch 安装最新版  logstash 最新版 kibana 最新版 (20190407日官网下载最新稳定版本)</p><p>首先安装Elasticsearch</p><p>这里需要注意几点,Elasticsearch默认不支持root用户运行,需要新建普通用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新建用户</span><br><span class="line">adduser elk</span><br><span class="line">设置密码</span><br><span class="line">passwd elk</span><br></pre></td></tr></table></figure><p>解压 Elasticsearch</p><p>进入 Elasticsearch/conf/Elasticsearch.yml</p><p>修改配置文件内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置服务名称</span></span><br><span class="line">cluster.name: elasticsearch_setsun<span class="comment">//# 集群的节点名称,默认也会创建一个,自己设置也是可以的</span></span><br><span class="line">node.name: <span class="string">"node-1"</span></span><br><span class="line"><span class="comment">// 这个参数控制的是，一个节点需要看到的具有master节点资格的最小数量，然后才能在集群中做操作。官方的推荐值是(N/2)+1，其中N是具有master资格的节点的数量,大致意思就是如果master挂掉了,则从这里查看还有几台具有master资格的机器,然后选取一台,如果低于两个,则集群可能就挂掉了,就变成单机了</span></span><br><span class="line">discovery.zen.minimum_master_nodes: <span class="number">2</span></span><br><span class="line"><span class="comment">// 这个属性表示节点是否存储数据</span></span><br><span class="line">node.data: <span class="keyword">true</span></span><br><span class="line"><span class="comment">// 是elasticsearch侦听的地方</span></span><br><span class="line">#network.bind_host: 0.0.0.0</span><br><span class="line"><span class="comment">// 集群通信端口</span></span><br><span class="line">transport.tcp.port: <span class="number">9300</span></span><br><span class="line"><span class="comment">// http监听端口</span></span><br><span class="line">http.port: <span class="number">9200</span></span><br><span class="line"><span class="comment">// 是否开启跨域访问</span></span><br><span class="line">http.cors.enabled: <span class="keyword">true</span></span><br><span class="line"><span class="comment">// 跨域请求匹配</span></span><br><span class="line">http.cors.allow-origin: <span class="string">"*"</span></span><br><span class="line"><span class="comment">//集群组件进行通信的地址//#network.publish_host: 127.0.0.//</span></span><br><span class="line"><span class="comment">// 这个参数是用来同时设置bind_host和publish_host上面两个参数。</span></span><br><span class="line">network.host: <span class="number">0.0</span>.0.0</span><br><span class="line"><span class="comment">// 设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"IP:9300"</span>,<span class="string">"IP:9300"</span>,<span class="string">"IP:9300"</span>,<span class="string">"IP:9300"</span>]</span><br><span class="line"></span><br><span class="line">bootstrap.memory_lock: <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">bootstrap.system_call_filter: <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">xpack.security.enabled: <span class="keyword">false</span></span><br><span class="line"><span class="comment">// 这个必须设置,不设置的话,外网放不到,应该是初始化master节点</span></span><br><span class="line">cluster.initial_master_nodes: [<span class="string">"node-1"</span>]</span><br></pre></td></tr></table></figure><p>剩下的直接拷贝写好的配置文件到其他机器上就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 批量拷贝配置文件至其他机器的Elasticsearch</span></span><br><span class="line">pscp   /home/Elasticsearch/Elasticsearch.yml -h host_list /home/Elasticsearch/Elasticsearch.yml</span><br><span class="line"><span class="comment">// 批量执行Elasticsearch服务</span></span><br><span class="line">pssh -h host_list -i <span class="string">"/home/Elasticsearch/bin/elasticsearch -d"</span></span><br></pre></td></tr></table></figure><p>然后到服务机器上安装logstash 解压之后配置文件如下内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line"></span><br><span class="line">    file &#123;</span><br><span class="line"><span class="comment">// 日志文件的路径</span></span><br><span class="line">        path =&gt; <span class="string">"/log/VCS/Camera/Log/CameraManager_log_current.log*"</span></span><br><span class="line">        start_position =&gt; <span class="string">"beginning"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line"><span class="comment">// 过滤正则表达式 </span></span><br><span class="line">match =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"(.+error.+)"</span>&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//stdout &#123;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//#    codec =&gt; rubydebug</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// #  &#125;</span></span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"33.90.129.59:9200"</span>]</span><br><span class="line">    index =&gt; <span class="string">"lcc-%&#123;+YYYYMMdd&#125;"</span></span><br><span class="line">  manage_template =&gt; <span class="keyword">true</span></span><br><span class="line">    template_overwrite =&gt; <span class="keyword">true</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">步骤同上批量拷贝配置文件至其他服务机器上<span class="meta-keyword">/home/</span>logstash/conf</span><br><span class="line">pscp <span class="meta-keyword">/home/</span>logstash<span class="meta-keyword">/conf/</span>logstash.conf -h host_list <span class="meta-keyword">/home/</span>logstash<span class="meta-keyword">/conf/</span></span><br><span class="line">批量启动</span><br><span class="line">pssh -h host_list -i <span class="string">"/home/logstash/bin/logstash -f /home/logstash/conf/logstash.conf"</span></span><br></pre></td></tr></table></figure><p>Kibana 直接解压启动,默认配置就可以 , nohup /home/kibana/bin/kibana &amp;</p><p>访问IP:5601即可看到数据</p>]]></content>
    
    <summary type="html">
    
      elasticsearch搭建遇到坑
    
    </summary>
    
      <category term="elasticsearch" scheme="https://lccsetsun.github.io/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="https://lccsetsun.github.io/tags/elasticsearch/"/>
    
      <category term="elk" scheme="https://lccsetsun.github.io/tags/elk/"/>
    
      <category term="logstash" scheme="https://lccsetsun.github.io/tags/logstash/"/>
    
  </entry>
  
  <entry>
    <title>shell高级使用</title>
    <link href="https://lccsetsun.github.io/2019/04/13/linux-use/"/>
    <id>https://lccsetsun.github.io/2019/04/13/linux-use/</id>
    <published>2019-04-12T23:05:38.000Z</published>
    <updated>2019-04-13T00:20:30.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shell高级命令"><a href="#shell高级命令" class="headerlink" title="shell高级命令"></a>shell高级命令</h2><p>以下是一些常用的linux批量处理和后台处理常用的命令,结合实际工作逻辑<br><a id="more"></a><br>就会变成一个很强大的脚本工具,具体使用场景看个人情况,这里只列举命令的用法,具体操作可在下方评论问答,<br>第一次写博客不知道写点啥,反正以后走技术路线,主要分析java方面,<br>如有不足,请积极指出,还望海涵</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">linux 去掉文档空格：</span><br><span class="line">cat list |sed <span class="string">'/^$/d'</span></span><br><span class="line">远程同步文件： </span><br><span class="line"> rsync -avzP /root/data<span class="comment">/*.json root@33.82.4.13:/root/lcc/info</span></span><br><span class="line"><span class="comment">查看root下面的文件</span></span><br><span class="line"><span class="comment"> pssh -h host -i "ll /root/ "</span></span><br><span class="line"><span class="comment">将本地lcc目录拷贝到远程机器admin下面</span></span><br><span class="line"><span class="comment"> pscp -h host -r /root/lcc /root/admin</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">Screen </span></span><br><span class="line"><span class="comment">关闭窗口</span></span><br><span class="line"><span class="comment">screen -S w_22_1(name) -X quit </span></span><br><span class="line"><span class="comment">建立新的链接</span></span><br><span class="line"><span class="comment">screen -R screen_name </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> crontab /tmp/crontab.bak</span></span><br><span class="line"><span class="comment"> //批量设置定时任务</span></span><br><span class="line"><span class="comment"> pssh -h hostlist -i "crontab /tmp/crontab.bak"</span></span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    <summary type="html">
    
      生命在于折腾
    
    </summary>
    
      <category term="linux" scheme="https://lccsetsun.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://lccsetsun.github.io/tags/linux/"/>
    
      <category term="学习linux" scheme="https://lccsetsun.github.io/tags/%E5%AD%A6%E4%B9%A0linux/"/>
    
  </entry>
  
  <entry>
    <title>docker 简单使用</title>
    <link href="https://lccsetsun.github.io/2019/04/11/dockerUse/"/>
    <id>https://lccsetsun.github.io/2019/04/11/dockerUse/</id>
    <published>2019-04-11T08:05:38.000Z</published>
    <updated>2019-04-13T00:20:16.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-使用"><a href="#Docker-使用" class="headerlink" title="Docker 使用"></a>Docker 使用</h2><p>docker 如何发布jar<br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:<span class="number">8</span>-jdk-alpineENV SPRING_OUTPUT_ANSI_ENABLED=ALWAYS \    </span><br><span class="line">JHIPSTER_SLEEP=<span class="number">0</span> \    </span><br><span class="line">JAVA_OPTS=<span class="string">""</span></span><br><span class="line"># add directly the war</span><br><span class="line">ADD *.jar /app.jar</span><br><span class="line">#设置运行景象 和北京时间</span><br><span class="line">RUN \    </span><br><span class="line">echo -e <span class="string">"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community"</span> &gt; /etc/apk/repositories &amp;&amp; \    </span><br><span class="line">apk update &amp;&amp; \    </span><br><span class="line">apk add --no-cache openssh tzdata &amp;&amp; \    </span><br><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \    </span><br><span class="line">echo <span class="string">"xiaoshanyunwei"</span> &gt;  /etc/timezone &amp;&amp; \    </span><br><span class="line">rm -rf /<span class="keyword">var</span>/cache/apk<span class="comment">/*</span></span><br><span class="line"><span class="comment">EXPOSE 8094 5701/udp</span></span><br><span class="line"><span class="comment">CMD echo "The application will start in $&#123;JHIPSTER_SLEEP&#125;s..." &amp;&amp; \    </span></span><br><span class="line"><span class="comment">sleep $&#123;JHIPSTER_SLEEP&#125; &amp;&amp; \    </span></span><br><span class="line"><span class="comment">java $&#123;JAVA_OPTS&#125; -Djava.security.egd=file:/dev/./urandom -jar /app.jar</span></span><br></pre></td></tr></table></figure><ul><li>第二种写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dockerfile 设置服务景象 </span><br><span class="line">FROM openjdk</span><br><span class="line">MAINTAINER lcc</span><br><span class="line">ENV JAVA_HOME /use/local/java</span><br><span class="line">RUN echo $JAVA_HOME</span><br><span class="line">ADD client_lcc-V1.jar /root/lcc/docker/app.jar</span><br><span class="line">VOLUME [<span class="string">"/root/lcc/docker"</span>]</span><br><span class="line">WORKDIR /root/lcc/docker</span><br><span class="line">EXPOSE <span class="number">8888</span>/tcp</span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/root/lcc/docker/app.jar"</span>] </span><br><span class="line">CMD java $JAVA_HOME -Djava.security.egd=file:/dev/./urandom -jar /root/lcc/docker/app.jar</span><br></pre></td></tr></table></figure><ul><li><p>CMD    容器启动时运行的操作。该指令只能在文件中存在一次，如果有多个，则只执行最后一条</p></li><li><p>ENTRYPOINT 设置容器启动时执行的操作。该指令只能在文件中存在一次，如果有多个，则只执行最后一条</p></li><li>EXPOSE 指定容器需要映射到宿主机器的端口.  </li><li>VOLUME 指定挂载点(设置运行文件存放的路径)</li><li>WORKDIR 切换目录。可以多次切换工作目录(相当于cd命令)</li><li>ENV 指定容器运行环境</li><li>docker build -t lcc/test .    打包当前Dockerfile并指定名称</li><li>docker run -d（后台运行） -p（端口映射 主机端口：容器端口）–env-file=／dev.sh (读取环境变量) lcc</li><li>-m :设置容器使用内存最大值</li><li>rm ID    删除docker容器(先删除容器，在删除镜像)</li><li>rmi ID    删除docker镜像</li><li>docker logs -f lcc(容器name)|grep ‘关键词’</li><li>docker ps    展示运行容器列表</li><li>docker images    展示镜像列表</li><li>docker save -o nginx.tar(导出名称) nginx:latest(镜像名称). docker镜像导出</li><li>docker export -o nginx-test.tar nginx-test docker导入 支持自定义镜像名称</li><li>docker load -i nginx.tar docker导入 全部信息导入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q) 删除所有镜像</span><br><span class="line">docker rm $(docker ps -a -q) 删除所有容器|stop停止所有容器</span><br><span class="line">删除id为&lt;None&gt;的image</span><br><span class="line">docker rmi $(docker images | grep <span class="string">"^&lt;none&gt;"</span> | awk <span class="string">"&#123;print $3&#125;"</span>)</span><br><span class="line">删除指定容器</span><br><span class="line">docker rm $(docker ps -a|grep -w <span class="string">"name"</span>|awk <span class="string">"&#123;print $3&#125;"</span>)</span><br><span class="line">复制容器中的配置文件到宿主机目录</span><br><span class="line">docker cp [CONTAINER ID]:/usr/local/logs /etc/docker/openapi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker-使用&quot;&gt;&lt;a href=&quot;#Docker-使用&quot; class=&quot;headerlink&quot; title=&quot;Docker 使用&quot;&gt;&lt;/a&gt;Docker 使用&lt;/h2&gt;&lt;p&gt;docker 如何发布jar&lt;br&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://lccsetsun.github.io/tags/docker/"/>
    
      <category term="linux" scheme="https://lccsetsun.github.io/tags/linux/"/>
    
      <category term="shell" scheme="https://lccsetsun.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>头部设置</title>
    <link href="https://lccsetsun.github.io/2017/12/14/hello-world/"/>
    <id>https://lccsetsun.github.io/2017/12/14/hello-world/</id>
    <published>2017-12-14T05:05:38.000Z</published>
    <updated>2019-04-12T10:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a><br> for more info. If you get any problems when using Hexo,<br><a id="more"></a><br>you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a><br> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      生命在于折腾
    
    </summary>
    
      <category term="utils" scheme="https://lccsetsun.github.io/categories/utils/"/>
    
    
      <category term="utils" scheme="https://lccsetsun.github.io/tags/utils/"/>
    
      <category term="test" scheme="https://lccsetsun.github.io/tags/test/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>setsun</title>
  
  <subtitle>For incalculable value</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lccsetsun.github.io/"/>
  <updated>2019-04-20T10:43:43.147Z</updated>
  <id>https://lccsetsun.github.io/</id>
  
  <author>
    <name>setsun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>elasticsearch 集群搭建</title>
    <link href="https://lccsetsun.github.io/2019/04/20/elk/"/>
    <id>https://lccsetsun.github.io/2019/04/20/elk/</id>
    <published>2019-04-20T08:47:28.000Z</published>
    <updated>2019-04-20T10:43:43.147Z</updated>
    
    <content type="html"><![CDATA[<h3 id="业务需求场景"><a href="#业务需求场景" class="headerlink" title="业务需求场景"></a>业务需求场景</h3><p>​    线上服务日志过多,为了方便监控系统运行状况,场景举例:</p><hr><h3 id="服务关系介绍"><a href="#服务关系介绍" class="headerlink" title="服务关系介绍"></a>服务关系介绍</h3><ul><li>A 服务网关 </li><li>B 具体服务 </li><li>C 拉取服务信息的集群(master work) </li><li>拉取信息(这里意为获取视频流 .h264)</li></ul><h3 id="运行逻辑概括"><a href="#运行逻辑概括" class="headerlink" title="运行逻辑概括"></a>运行逻辑概括</h3><ul><li><p>A服务网关</p></li><li><p>C服务调用网关,获取通行证</p></li><li><p>然后用C的work服务携带通行证去B 拉取信息存到消息队列,供下游算法执行相应的业务处理</p></li></ul><h3 id="目前存在问题"><a href="#目前存在问题" class="headerlink" title="目前存在问题"></a>目前存在问题</h3><ul><li>拉取信息超时错误代码(404,408…)</li><li>拉取信息失败(设置重试时间,一定时间后重试拉取)</li><li>获取网关通行证失败(c服务同一时间大量的去请求网关获取通行证,导致网关队列堵塞,处理不过来)</li><li>c服务增加任务失败,无响应</li></ul><hr><h3 id="拉取信息超时的原因总结"><a href="#拉取信息超时的原因总结" class="headerlink" title="拉取信息超时的原因总结"></a>拉取信息超时的原因总结</h3><p>1.获取网关通行证失败,或者获取不到,为此设置失败重试,直到拿到通行证为止</p><p>以上方案导致 网关会莫名其妙的挂掉,后面优化了网关的服务</p><p>2.拉取信息失败</p><p>原因当视频流不完整的时候体现为糊化,卡顿,由于我们拉取信息的代码逻辑是,不要糊化的视频,所以一旦出现卡顿糊化现象,也就是一秒二十四帧,丢了一帧,我们会全部抛弃之后的所有,知道抓到下一个I帧,也就是所谓的关键帧才会往消息队列里面存,这就导致了,提供服务信息的B平台看到有一点卡顿,而C平台则直接跳好几秒的情况,而一旦超过三秒没有收到数据包,则认为断流,系统将会主动断开连接,重新请求获取通行证,这样主动断开的操作是为了节约内存消耗,让没有拉取到信息的任务不在占用运行空间,给其他任务使用</p><p>3.获取网关通行证失败</p><p>​    这个可能原因是网关承受不住那么大的并发访问,导致一直阻塞内存飙升,网关不是我负责的,我也不清楚具体什么原因但是大致是因为并发太大承受不住的问题</p><p>4.c服务增加任务失败,无响应</p><p>这个问题主要是由第三个问题影响的蝴蝶效应,网关处理不过来,C新加的任务需要请求网关,然后一直在A的等待队列里面,没有任何回应,也没有错误代码,就卡在网关这里了,最后导致C服务也挂掉了</p><p>以上问题的排查步骤,都需要去机器上grep一下日志,查看当前点位是什么状态,如果请求成功,还要去work机器上,看看是因为拉取失败,还是真的没有信息,步骤繁琐,还要查询任务分配到集群的那个机器上,排查时间长,效率低,所以考虑不熟elk集群进行监控任务</p><p>Elk 部署前提,需要jdk支持</p><p>以下默认你已成功安装jdk</p><p>Elasticsearch 安装最新版  logstash 最新版 kibana 最新版 (20190407日官网下载最新稳定版本)</p><p>首先安装Elasticsearch</p><p>这里需要注意几点,Elasticsearch默认不运行root用户运行,需要新建普通用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新建用户</span><br><span class="line">adduser elk</span><br><span class="line">设置密码</span><br><span class="line">passwd elk</span><br></pre></td></tr></table></figure><p>解压 Elasticsearch</p><p>进入 Elasticsearch/conf/Elasticsearch.yml</p><p>修改配置文件内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置服务名称</span></span><br><span class="line">cluster.name: elasticsearch_setsun<span class="comment">//# 集群的节点名称,默认也会创建一个,自己设置也是可以的</span></span><br><span class="line">node.name: <span class="string">"node-1"</span></span><br><span class="line"><span class="comment">// 这个参数控制的是，一个节点需要看到的具有master节点资格的最小数量，然后才能在集群中做操作。官方的推荐值是(N/2)+1，其中N是具有master资格的节点的数量,大致意思就是如果master挂掉了,则从这里查看还有几台具有master资格的机器,然后选取一台,如果低于两个,则集群可能就挂掉了,就变成单机了</span></span><br><span class="line">discovery.zen.minimum_master_nodes: <span class="number">2</span></span><br><span class="line"><span class="comment">// 这个属性表示节点是否存储数据</span></span><br><span class="line">node.data: <span class="keyword">true</span></span><br><span class="line"><span class="comment">// 是elasticsearch侦听的地方</span></span><br><span class="line">#network.bind_host: 0.0.0.0</span><br><span class="line"><span class="comment">// 集群通信端口</span></span><br><span class="line">transport.tcp.port: <span class="number">9300</span></span><br><span class="line"><span class="comment">// http监听端口</span></span><br><span class="line">http.port: <span class="number">9200</span></span><br><span class="line"><span class="comment">// 是否开启跨域访问</span></span><br><span class="line">http.cors.enabled: <span class="keyword">true</span></span><br><span class="line"><span class="comment">// 跨域请求匹配</span></span><br><span class="line">http.cors.allow-origin: <span class="string">"*"</span></span><br><span class="line"><span class="comment">//集群组件进行通信的地址//#network.publish_host: 127.0.0.//</span></span><br><span class="line"><span class="comment">// 这个参数是用来同时设置bind_host和publish_host上面两个参数。</span></span><br><span class="line">network.host: <span class="number">0.0</span>.0.0</span><br><span class="line"><span class="comment">// 设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"IP:9300"</span>,<span class="string">"IP:9300"</span>,<span class="string">"IP:9300"</span>,<span class="string">"IP:9300"</span>]</span><br><span class="line"></span><br><span class="line">bootstrap.memory_lock: <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">bootstrap.system_call_filter: <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">xpack.security.enabled: <span class="keyword">false</span></span><br><span class="line"><span class="comment">// 这个必须设置,不设置的话,外网放不到,应该是初始化master节点</span></span><br><span class="line">cluster.initial_master_nodes: [<span class="string">"node-1"</span>]</span><br></pre></td></tr></table></figure><p>剩下的直接拷贝写好的配置文件到其他机器上就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 批量拷贝配置文件至其他机器的Elasticsearch</span></span><br><span class="line">pscp   /home/Elasticsearch/Elasticsearch.yml -h host_list /home/Elasticsearch/Elasticsearch.yml</span><br><span class="line"><span class="comment">// 批量执行Elasticsearch服务</span></span><br><span class="line">pssh -h host_list -i <span class="string">"/home/Elasticsearch/bin/elasticsearch -d"</span></span><br></pre></td></tr></table></figure><p>然后到服务机器上安装logstash 解压之后配置文件如下内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line"></span><br><span class="line">    file &#123;</span><br><span class="line"><span class="comment">// 日志文件的路径</span></span><br><span class="line">        path =&gt; <span class="string">"/log/VCS/Camera/Log/CameraManager_log_current.log*"</span></span><br><span class="line">        start_position =&gt; <span class="string">"beginning"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line"><span class="comment">// 过滤正则表达式 </span></span><br><span class="line">match =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"(.+error.+)"</span>&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//stdout &#123;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//#    codec =&gt; rubydebug</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// #  &#125;</span></span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">"33.90.129.59:9200"</span>]</span><br><span class="line">    index =&gt; <span class="string">"lcc-%&#123;+YYYYMMdd&#125;"</span></span><br><span class="line">  manage_template =&gt; <span class="keyword">true</span></span><br><span class="line">    template_overwrite =&gt; <span class="keyword">true</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">步骤同上批量拷贝配置文件至其他服务机器上<span class="meta-keyword">/home/</span>logstash/conf</span><br><span class="line">pscp <span class="meta-keyword">/home/</span>logstash<span class="meta-keyword">/conf/</span>logstash.conf -h host_list <span class="meta-keyword">/home/</span>logstash<span class="meta-keyword">/conf/</span></span><br><span class="line">批量启动</span><br><span class="line">pssh -h host_list -i <span class="string">"/home/logstash/bin/logstash -f /home/logstash/conf/logstash.conf"</span></span><br></pre></td></tr></table></figure><p>Kibana 直接解压启动,默认配置就可以 , nohup /home/kibana/bin/kibana &amp;</p><p>访问IP:5601即可看到数据</p>]]></content>
    
    <summary type="html">
    
      elasticsearch搭建遇到坑
    
    </summary>
    
      <category term="elasticsearch" scheme="https://lccsetsun.github.io/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="https://lccsetsun.github.io/tags/elasticsearch/"/>
    
      <category term="elk" scheme="https://lccsetsun.github.io/tags/elk/"/>
    
      <category term="logstash" scheme="https://lccsetsun.github.io/tags/logstash/"/>
    
  </entry>
  
  <entry>
    <title>shell高级使用</title>
    <link href="https://lccsetsun.github.io/2019/04/13/linux-use/"/>
    <id>https://lccsetsun.github.io/2019/04/13/linux-use/</id>
    <published>2019-04-12T23:05:38.000Z</published>
    <updated>2019-04-13T00:20:30.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shell高级命令"><a href="#shell高级命令" class="headerlink" title="shell高级命令"></a>shell高级命令</h2><p>以下是一些常用的linux批量处理和后台处理常用的命令,结合实际工作逻辑<br><a id="more"></a><br>就会变成一个很强大的脚本工具,具体使用场景看个人情况,这里只列举命令的用法,具体操作可在下方评论问答,<br>第一次写博客不知道写点啥,反正以后走技术路线,主要分析java方面,<br>如有不足,请积极指出,还望海涵</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">linux 去掉文档空格：</span><br><span class="line">cat list |sed <span class="string">'/^$/d'</span></span><br><span class="line">远程同步文件： </span><br><span class="line"> rsync -avzP /root/data<span class="comment">/*.json root@33.82.4.13:/root/lcc/info</span></span><br><span class="line"><span class="comment">查看root下面的文件</span></span><br><span class="line"><span class="comment"> pssh -h host -i "ll /root/ "</span></span><br><span class="line"><span class="comment">将本地lcc目录拷贝到远程机器admin下面</span></span><br><span class="line"><span class="comment"> pscp -h host -r /root/lcc /root/admin</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">Screen </span></span><br><span class="line"><span class="comment">关闭窗口</span></span><br><span class="line"><span class="comment">screen -S w_22_1(name) -X quit </span></span><br><span class="line"><span class="comment">建立新的链接</span></span><br><span class="line"><span class="comment">screen -R screen_name </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> crontab /tmp/crontab.bak</span></span><br><span class="line"><span class="comment"> //批量设置定时任务</span></span><br><span class="line"><span class="comment"> pssh -h hostlist -i "crontab /tmp/crontab.bak"</span></span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    <summary type="html">
    
      生命在于折腾
    
    </summary>
    
      <category term="linux" scheme="https://lccsetsun.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://lccsetsun.github.io/tags/linux/"/>
    
      <category term="学习linux" scheme="https://lccsetsun.github.io/tags/%E5%AD%A6%E4%B9%A0linux/"/>
    
  </entry>
  
  <entry>
    <title>docker 简单使用</title>
    <link href="https://lccsetsun.github.io/2019/04/11/dockerUse/"/>
    <id>https://lccsetsun.github.io/2019/04/11/dockerUse/</id>
    <published>2019-04-11T08:05:38.000Z</published>
    <updated>2019-04-13T00:20:16.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-使用"><a href="#Docker-使用" class="headerlink" title="Docker 使用"></a>Docker 使用</h2><p>docker 如何发布jar<br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:<span class="number">8</span>-jdk-alpineENV SPRING_OUTPUT_ANSI_ENABLED=ALWAYS \    </span><br><span class="line">JHIPSTER_SLEEP=<span class="number">0</span> \    </span><br><span class="line">JAVA_OPTS=<span class="string">""</span></span><br><span class="line"># add directly the war</span><br><span class="line">ADD *.jar /app.jar</span><br><span class="line">#设置运行景象 和北京时间</span><br><span class="line">RUN \    </span><br><span class="line">echo -e <span class="string">"https://mirrors.ustc.edu.cn/alpine/latest-stable/main\nhttps://mirrors.ustc.edu.cn/alpine/latest-stable/community"</span> &gt; /etc/apk/repositories &amp;&amp; \    </span><br><span class="line">apk update &amp;&amp; \    </span><br><span class="line">apk add --no-cache openssh tzdata &amp;&amp; \    </span><br><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \    </span><br><span class="line">echo <span class="string">"xiaoshanyunwei"</span> &gt;  /etc/timezone &amp;&amp; \    </span><br><span class="line">rm -rf /<span class="keyword">var</span>/cache/apk<span class="comment">/*</span></span><br><span class="line"><span class="comment">EXPOSE 8094 5701/udp</span></span><br><span class="line"><span class="comment">CMD echo "The application will start in $&#123;JHIPSTER_SLEEP&#125;s..." &amp;&amp; \    </span></span><br><span class="line"><span class="comment">sleep $&#123;JHIPSTER_SLEEP&#125; &amp;&amp; \    </span></span><br><span class="line"><span class="comment">java $&#123;JAVA_OPTS&#125; -Djava.security.egd=file:/dev/./urandom -jar /app.jar</span></span><br></pre></td></tr></table></figure><ul><li>第二种写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dockerfile 设置服务景象 </span><br><span class="line">FROM openjdk</span><br><span class="line">MAINTAINER lcc</span><br><span class="line">ENV JAVA_HOME /use/local/java</span><br><span class="line">RUN echo $JAVA_HOME</span><br><span class="line">ADD client_lcc-V1.jar /root/lcc/docker/app.jar</span><br><span class="line">VOLUME [<span class="string">"/root/lcc/docker"</span>]</span><br><span class="line">WORKDIR /root/lcc/docker</span><br><span class="line">EXPOSE <span class="number">8888</span>/tcp</span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/root/lcc/docker/app.jar"</span>] </span><br><span class="line">CMD java $JAVA_HOME -Djava.security.egd=file:/dev/./urandom -jar /root/lcc/docker/app.jar</span><br></pre></td></tr></table></figure><ul><li><p>CMD    容器启动时运行的操作。该指令只能在文件中存在一次，如果有多个，则只执行最后一条</p></li><li><p>ENTRYPOINT 设置容器启动时执行的操作。该指令只能在文件中存在一次，如果有多个，则只执行最后一条</p></li><li>EXPOSE 指定容器需要映射到宿主机器的端口.  </li><li>VOLUME 指定挂载点(设置运行文件存放的路径)</li><li>WORKDIR 切换目录。可以多次切换工作目录(相当于cd命令)</li><li>ENV 指定容器运行环境</li><li>docker build -t lcc/test .    打包当前Dockerfile并指定名称</li><li>docker run -d（后台运行） -p（端口映射 主机端口：容器端口）–env-file=／dev.sh (读取环境变量) lcc</li><li>-m :设置容器使用内存最大值</li><li>rm ID    删除docker容器(先删除容器，在删除镜像)</li><li>rmi ID    删除docker镜像</li><li>docker logs -f lcc(容器name)|grep ‘关键词’</li><li>docker ps    展示运行容器列表</li><li>docker images    展示镜像列表</li><li>docker save -o nginx.tar(导出名称) nginx:latest(镜像名称). docker镜像导出</li><li>docker export -o nginx-test.tar nginx-test docker导入 支持自定义镜像名称</li><li>docker load -i nginx.tar docker导入 全部信息导入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q) 删除所有镜像</span><br><span class="line">docker rm $(docker ps -a -q) 删除所有容器|stop停止所有容器</span><br><span class="line">删除id为&lt;None&gt;的image</span><br><span class="line">docker rmi $(docker images | grep <span class="string">"^&lt;none&gt;"</span> | awk <span class="string">"&#123;print $3&#125;"</span>)</span><br><span class="line">删除指定容器</span><br><span class="line">docker rm $(docker ps -a|grep -w <span class="string">"name"</span>|awk <span class="string">"&#123;print $3&#125;"</span>)</span><br><span class="line">复制容器中的配置文件到宿主机目录</span><br><span class="line">docker cp [CONTAINER ID]:/usr/local/logs /etc/docker/openapi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker-使用&quot;&gt;&lt;a href=&quot;#Docker-使用&quot; class=&quot;headerlink&quot; title=&quot;Docker 使用&quot;&gt;&lt;/a&gt;Docker 使用&lt;/h2&gt;&lt;p&gt;docker 如何发布jar&lt;br&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://lccsetsun.github.io/tags/docker/"/>
    
      <category term="linux" scheme="https://lccsetsun.github.io/tags/linux/"/>
    
      <category term="shell" scheme="https://lccsetsun.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>头部设置</title>
    <link href="https://lccsetsun.github.io/2017/12/14/hello-world/"/>
    <id>https://lccsetsun.github.io/2017/12/14/hello-world/</id>
    <published>2017-12-14T05:05:38.000Z</published>
    <updated>2019-04-12T10:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a><br> for more info. If you get any problems when using Hexo,<br><a id="more"></a><br>you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a><br> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      生命在于折腾
    
    </summary>
    
      <category term="utils" scheme="https://lccsetsun.github.io/categories/utils/"/>
    
    
      <category term="utils" scheme="https://lccsetsun.github.io/tags/utils/"/>
    
      <category term="test" scheme="https://lccsetsun.github.io/tags/test/"/>
    
  </entry>
  
</feed>
